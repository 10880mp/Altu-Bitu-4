#include <iostream> // 입출력을 위한 헤더
#include <stack> // 스택 자료구조 사용을 위한 헤더
#include <string> // 문자열 클래스를 사용하기 위한 헤더

/* <BOJ_4949>
 (), [] 각각 짝이 맞아야 균형을 이룸
 문장이 .으로 끝나지 않아도 균형 이루지 않음
 각 줄마다 균형 이루면 yes, 아니면 no 출력
 마지막으로 " . " 입력받으면 프로그램 종료
*/

// 스택을 이용하여 왼쪽 괄호 "( , [" 가 있으면 스택에 push 후,
// 각각 짝이 맞는 오른쪽 괄호 ") , ]" 가 나오면 해당 왼쪽 괄호를 스택에서 pop

using namespace std;

bool isBalanced(string input) { 
    // 문자열 (input) 내에서 괄호가 균형을 이루었는지 여부 반환하는 함수
    // 균형 이루면 true 반환, 이루지 못하면 false 반환

    stack<char> s; // 괄호 "[], ()" 저장하는 char형 스택

    for (int i = 0; i < input.length(); i++) { // 문자열 길이만큼 반복문 실행
        char ch = input[i]; // 문자열 안의 각각의 개별문자

        switch (ch) { // 개별 문자마다 확인하는 조건문 

        case '(': case '[': // 여는 왼쪽 괄호인 경우
            s.push(ch); // 무조건 스택에 push
            break; // switch문 종료

        case ')': // 닫는 오른쪽 소괄호인 경우
            if (s.empty() || s.top() != '(') { 
                // 스택이 비어있거나 (닫는 소괄호와 짝이 맞는 여는 소괄호가 없다는 뜻)
                // == 닫는 소괄호와 짝이 맞지 않음
                // 스택의 가장 상단 (top)이 여는 소괄호가 아닌 경우 
                // (닫는 소괄호와 종류가 맞지 않다는 뜻)
                return false; // false 값 반환 (균형이 맞지 않음)
            }
            s.pop(); // 위의 if문이 아닌경우 스택에서 top에 있는 원소 삭제
            // (스택이 비어있지 않고, 스택의 top에 있는 원소가 닫는 오른쪽 소괄호와 
            // 짝이 맞는 여는 왼쪽 소괄호인 경우)
            // 비어있는 스택 pop할 경우 에러 발생

            break; // switch문 종료

        case ']': // 닫는 오른쪽 대괄호인 경우
            if (s.empty() || s.top() != '[') {
                // 스택이 비어있거나 (닫는 대괄호와 짝이 맞는 여는 대괄호가 없다는 뜻)
                //  == 닫는 대괄호와 짝이 맞지 않음
                // 스택의 가장 상단 (top)이 여는 소괄호가 아닌 경우
                // (닫는 대괄호와 종류가 맞지 않다는 뜻)
                return false; // false 값 반환 (균형이 맞지 않음)
            }
            s.pop(); // 위의 if문이 아닌경우 스택에서 top에 있는 원소 삭제
            // (스택이 비어있지 않고, 스택의 top에 있는 원소가 닫는 오른쪽 대괄호와 
            // 짝이 맞는 여는 왼쪽 대괄호인 경우)
            // 비어있는 스택 pop할 경우 에러 발생

            break; // switch문 종료
        }
    }
    return s.empty(); // 스택이 비어있는지 확인하는 값 반환 
    // 비어있으면 true 반환, 비어있지 않으면 false 반환
}

/*
 * [괄호 균형 확인하기]
 * 1. 여는 괄호는 바로 스택에 넣는다.
 * 2. 닫는 괄호가 나오면 가장 최근에 넣었던 여는 괄호와 비교한다.
 * 2-1. 닫는 괄호와 여는 괄호의 종류가 같다면 해당 닫는 괄호가 균형을 이룬다.
 * 2-2. 직전에 나온 여는 괄호가 없거나 그 종류가 다르다면 해당 닫는 괄호가 균형을 이루지 못한다.
 * 3. 모든 닫는 괄호가 여는 괄호와 짝을 이루었더라도 스택에 여는 괄호가 남아있다면 균형을 이루지 못한다.
*/


int main() { // 가장 먼저 실행되는 main 함수
    string input; // 입력되는 문자열 input

    while (true) { // 입력받은 문자열에서 한 줄마다 균형 맞는지 확인하는 반복문 실행
        // 입력
        getline(cin, input); // 문자열에서 한 줄씩 입력 받음 
        if (input == ".") { // 입력되는 문자열이 온점인 경우
            break; // while문 종료 ( "." 입력받으면 프로그램 종료)
        }
        // 연산 & 출력
        if (isBalanced(input)) {
            // 문자열이 균형을 이룬다면 (위의 함수에서 true값 반환)
            cout << "yes\n"; // yes 출력
        }
        else { // 문자열이 균형을 이루지 않는다면 (위의 함수에서 false 값 반환)
            cout << "no\n"; // no 출력
        }
    }
    return 0; // 메인 함수 종료
}